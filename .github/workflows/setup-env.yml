name: 'spicy octopod'

on:
  push:
    branches: [ "test-deploy" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform_env:
    name: 'Setup-Env'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.EGT }}
    defaults:
      run:
        shell: bash
        working-directory: ./env

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
  #    with:
  #      cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/deploy' && github.event_name == 'push'
    #  run: terraform apply -auto-approve -input=false

  terraform_xc:
    name: 'XC'
    runs-on: ubuntu-latest
    needs: terraform_env
    env:
      GITHUB_TOKEN: ${{ secrets.EGT }}
      VES_P12_CONTENT: ${{ secrets.XC_KEY }}
      VES_P12_PASSWORD: ${{ secrets.XC_KEY_PASS }}
    defaults:
      run:
        shell: bash
        working-directory: ./f5/xc

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
  #    with:
  #      cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/deploy' && github.event_name == 'push'
    #  run: terraform apply -auto-approve -input=false